-- Traffic light controller  template for Lab6 Parts 2-4
-- 
-- Part 2: Models the intersection of a farm road (left lights) and a highway (right lights): 
-- 		   RG lasts 7 cycles; each of the others lasts 2 cycles
-- Part 3: Introduce a sensor input (treadle) for the farm road. The farm green light is  
--		   granted for 2 cycles only when sensor is active (high)
-- Part 4: Give farm green light 7 cycles if sensor still active after two cycles 
-- Save a copy of the program for each part as you progressively refine the controller
-- Read the Lab6 descrition for more details. 

-- Engineer:
-- Date: April 2022

library IEEE;  
use IEEE.std_logic_1164.all;

entity TrafficControl is port(
    clock: in  std_logic;                    -- Clock input from the physical traffic lights station
	lights: out std_logic_vector(5 downto 0) -- Physical traffic light ouput: left RYG, right RYG, active HIGH
);
end entity;

architecture behav of TrafficControl is

 -- Define constants for traffic light bit patterns 
 
 
constant RG: std_logic_vector(5 downto 0)  := "100001";	--active high
constant RY: std_logic_vector(5 downto 0)  := "100010";
constant GR: std_logic_vector(5 downto 0)  := "001100";
constant YR: std_logic_vector(5 downto 0)  := "010100";
constant RR: std_logic_vector(5 downto 0)  := "100100";

-- Define constants for counter values for Parts 2-4
-- These will be concatenated with various lights patterns for different states
-- For example: C0&RG to indicate the 1st cycle for RG, C1&RG for the 2nd RG cycle, etc.

constant C0: std_logic_vector(2 downto 0) := "000";
constant C1: std_logic_vector(2 downto 0) := "001"; -- Continue below...for parts 2-4








signal Q: std_logic_vector(8 downto 0) := C0&RG;-- IState vector used internally; nitialized to 1st cycle of RG


begin

-- Assign the last six bits of the state vector to the lights output below


-- Write a process sensitive to clock only 
-- In the process, use a CASE statement to model lights sequence, and IF statements for the sensor (treadle) input. 





end behav;




