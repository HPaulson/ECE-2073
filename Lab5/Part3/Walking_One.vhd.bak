-- Walking_One.vhd (Lab5, Part3)
-- This implements a walking one pattern on 10 LEDRs
-- KEY(0) is used to clock the FSM
-- The current (10-bit) state Q is outputted on LEDR[9..0]
-- Switch SW[1] resets the state Q to S0 or S9 depending on the direction SE(0)
-- Switch SW[0] acts as the direction input: 1=> walk left; 0 => right
-- Engineer: 
-- Date: March 2022

library IEEE; 
use IEEE.STD_LOGIC_1164.all;

entity Walking_One is
  port (  
  KEY:  in  std_logic_vector(0 downto 0); -- KEY(0) is your clock, falling edge
  SW:   in  std_logic_vector(1 downto 0); -- SW(1) = reset,
                                          -- SW(0): 1=> walk left; 0 => right
  LEDR: out std_logic_vector (9 downto 0)
 ); --Walking 1 output
end entity;


architecture behav of Walking_One is
signal Q: std_logic_vector (9 downto 0);	--State signal
 
constant S0: std_logic_vector(9 downto 0) := "0000000001";
constant S1: std_logic_vector(9 downto 0) := "0000000010";
constant S2: std_logic_vector(9 downto 0) := "0000000100";
constant S3: std_logic_vector(9 downto 0) := "0000001000";
constant S4: std_logic_vector(9 downto 0) := "0000010000";
constant S5: std_logic_vector(9 downto 0) := "0000100000";
constant S6: std_logic_vector(9 downto 0) := "0001000000";
constant S7: std_logic_vector(9 downto 0) := "0010000000";
constant S8: std_logic_vector(9 downto 0) := "0100000000";
constant S9: std_logic_vector(9 downto 0) := "1000000000";


begin
-- Your code starts below
-- Check the comments on the top for the FSM behavior



end architecture;
