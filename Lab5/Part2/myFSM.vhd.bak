-- myFSM.vhd (Lab5, Part2)
-- This implements your Lab4 Finite State Machine in VHDL...
-- The KEY(0) Pushbutton is used to clock the FSM
-- The current (2-bit) state Q is outputted on LEDR[2..1]
-- The FSM output z is outputted on LEDR[0]
-- Switch SW[0] resets the state Q to 000 (active high)
-- Switch SW[1] acts as the input x
-- Engineer: Your name
-- Date: March 2022

library IEEE; 
use IEEE.STD_LOGIC_1164.all;

entity myFSM is port(
  SW:   in  std_logic_vector(1 downto 0); -- SW(1) for input x;  SW(0) for reset
  KEY:  in  std_logic_vector(0 downto 0); -- KEY(0) is your clock, falling edge
  LEDR: out std_logic_vector(2 downto 0)  -- LEDR(2 downto 1) = Q, LEDR(0) = z
);
end entity;

architecture behav of myFSM is
signal Q: std_logic_vector(1 downto 0); -- state
begin
---------------------------------------------------------------------------------------
-- Your code starts after the comments:												 --
-- Assign the current state Q to the LEDR(2) and LEDR(1) outputs					 --
-- Use a process and a CASE statement to model the behavior of your FSM			     --
-- Your process is sensitive to the clock signal KEY(0) and input x	(i.e. SW(1))	 --
-- Inside your process, use "if KEY(0)'event and KEY(0) = '0' then" for clock edge	 --
-- When reset (i.e. SW(0)) is '1', your Q is set to the first state				   --
--------------------------------------------------------------------------------------- 




end architecture;
